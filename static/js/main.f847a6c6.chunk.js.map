{"version":3,"sources":["components/elements/index.tsx","components/Canvas/reducer.tsx","reducer.tsx","components/Header/index.tsx","components/elements/Box.tsx","components/Sidebar/index.tsx","components/Canvas/selectors.tsx","components/CanvasElement/index.tsx","components/Canvas/index.tsx","components/CanvasElementSettings/index.tsx","components/Settings/index.tsx","components/Body/index.tsx","components/Footer/index.tsx","App.tsx","serviceWorker.ts","index.tsx","store.ts"],"names":["ElementTypes","canvasSlice","createSlice","name","initialState","elements","selectedElement","reducers","addElement","payload","push","top","left","moveElement","id","selectElement","state","length","actions","combineReducers","canvas","selectCanvas","Box","width","height","backgroundColor","style","sidebarDraggableElements","connect","dispatch","onClick","type","props","className","map","Element","i","key","selectElements","createSelector","selectElementPositions","element","selectElementPropsById","memoize","selectSelectedElement","isSelectedElement","selectSelectedElementProps","ownProps","ElementComponent","Error","getElementByType","elementPositions","useState","clientX","clientY","draggedElement","drag","onDragStart","onDragEnd","drop","draggable","selectedElementProps","toPairs","value","console","log","CanvasElementSettings","Settings","App","Header","Body","Footer","Boolean","window","location","hostname","match","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f847a6c6.chunk.js","sourcesContent":["import React from 'react'\nimport { Box, BoxProps } from './Box'\n\nexport enum ElementTypes {\n  Box = 'element_box'\n}\n\nexport type ElementProps = BoxProps\n\nexport const getElementByType = (type: ElementTypes) => {\n  switch (type) {\n    case ElementTypes.Box:\n      return (props: BoxProps) => <Box {...props} />\n    default:\n      throw new Error(`No element for ${type} type`)\n  }\n}\n\nexport { Box }\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { ElementTypes, ElementProps } from '../elements'\n\nexport interface AbsolutePosition {\n  top: number,\n  left: number\n}\n\nexport interface ElementState extends AbsolutePosition {\n  type: ElementTypes,\n  props: ElementProps,\n}\n\nexport interface CanvasState {\n  elements: ElementState[]\n  selectedElement: number\n}\n\nconst initialState: CanvasState = {\n  elements: [],\n  selectedElement: -1\n}\n\nexport interface AddElementPayload {\n  type: ElementTypes,\n  props: ElementProps\n}\n\nexport interface SelectElementPayload {\n  id: number\n}\n\nexport type MoveElementPayload = AbsolutePosition & { id: number }\n\nconst canvasSlice = createSlice({\n  name: 'canvas',\n  initialState,\n  reducers: {\n    addElement({ elements }: CanvasState, { payload }: PayloadAction<AddElementPayload>) {\n      elements.push({ ...payload, top: 10, left: 10 })\n    },\n    moveElement({ elements }: CanvasState, { payload: { id, top, left } }: PayloadAction<MoveElementPayload>) {\n      elements[id].top += top\n      elements[id].left += left\n    },\n    selectElement(state: CanvasState, { payload: { id } }: PayloadAction<SelectElementPayload>) {\n      if (id >= -1 && id < state.elements.length) {\n        if (state.selectedElement !== id) {\n          state.selectedElement = id\n        } else {\n          state.selectedElement = -1\n        }\n      }\n    }\n  }\n})\n\nexport const { addElement, moveElement, selectElement } = canvasSlice.actions\n\nexport default canvasSlice.reducer\n","import { combineReducers } from '@reduxjs/toolkit'\nimport canvas from './components/Canvas/reducer'\nimport { RootState } from './store'\n\nexport default combineReducers({\n  canvas\n})\n\nexport const selectCanvas = (state: RootState) => state.canvas\n","import React from 'react'\n\nexport default () => (<label>Header</label>)\n","import React from 'react'\n\nexport interface BoxProps {\n  width: string | number\n  height: string | number\n  backgroundColor: string\n}\n\nexport const Box: React.FC<BoxProps> = ({ width, height, backgroundColor }) => (\n  <div style={{ width, height, backgroundColor }} />\n)\n","import React from 'react'\nimport './style.sass'\nimport { Box, ElementTypes } from '../elements'\nimport { Dispatch } from '@reduxjs/toolkit'\nimport { addElement } from '../Canvas/reducer'\nimport { connect } from 'react-redux'\n\ninterface SidebarProps {\n  onClick: () => void\n}\n\nconst sidebarDraggableElements = [\n  () => <Box height={40} width=\"100%\" backgroundColor=\"#444444\" />\n]\n\nconst Sidebar: React.FC<SidebarProps> = ({ onClick }) => (\n  <div className=\"Sidebar\">\n    <h4>Add element</h4>\n    {\n      sidebarDraggableElements.map((Element, i) => (\n        <div key={i} className=\"element-container\" onClick={onClick}>\n          <Element />\n        </div>\n      ))\n    }\n  </div>\n)\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  onClick: () => dispatch(addElement({\n    type: ElementTypes.Box,\n    props: {\n      width: 140,\n      height: 50,\n      backgroundColor: '#ac04f2'\n    }\n  }))\n})\n\nexport default connect(null, mapDispatchToProps)(Sidebar)\n","import { createSelector } from 'reselect'\nimport { selectCanvas } from '../../reducer'\nimport memoize from 'lodash/memoize'\n\nexport const selectElements = createSelector(\n  selectCanvas,\n  state => state.elements\n)\n\nexport const selectElementPositions = createSelector(\n  selectElements,\n  elements => elements.map(element => ({ top: element.top, left: element.left }))\n)\n\nexport const selectElementPropsById = createSelector(\n  selectElements,\n  elements => memoize((id: number) => {\n    const { props, type }= elements[id]\n    return { props, type }\n  })\n)\n\nexport const selectSelectedElement = createSelector(\n  selectCanvas,\n  state => state.selectedElement\n)\n\nexport const isSelectedElement = createSelector(\n  selectSelectedElement,\n  selectedElement => selectedElement > -1\n)\n\nexport const selectSelectedElementProps = createSelector(\n  selectElements,\n  selectSelectedElement,\n  (elements, selectedElement) => elements[selectedElement].props\n)\n","import React from 'react'\nimport { ElementTypes, ElementProps, getElementByType } from '../elements'\nimport { RootState } from '../../store'\nimport { selectElementPropsById } from '../Canvas/selectors'\nimport { connect } from 'react-redux'\n\ninterface CanvasElementOwnProps {\n  id: number\n}\n\ninterface CanvasElementProps {\n  type: ElementTypes,\n  props: ElementProps\n}\n\nconst CanvasElement: React.FC<CanvasElementProps> = ({ type, props }) => {\n  const ElementComponent = getElementByType(type)\n\n  return (\n    <ElementComponent {...props} />\n  )\n}\n\nconst mapStateToProps = (state: RootState, ownProps: CanvasElementOwnProps) => ({\n  ...selectElementPropsById(state)(ownProps.id)\n})\n\nexport default connect(mapStateToProps)(CanvasElement)\n","import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { Dispatch } from '@reduxjs/toolkit'\nimport './style.sass'\nimport { moveElement, MoveElementPayload, SelectElementPayload, selectElement } from './reducer'\nimport { RootState } from '../../store'\nimport { selectElementPositions } from './selectors'\nimport CanvasElement from '../CanvasElement'\n\ninterface CanvasProps {\n  elementPositions: ReturnType<typeof selectElementPositions>\n  moveElement: (payload: MoveElementPayload) => void\n  selectElement: (payload: SelectElementPayload) => void\n}\n\ntype DraggedElementPosition = {\n  clientX: number\n  clientY: number\n}\n\ntype DraggedElement = {\n  id: number\n} & DraggedElementPosition\n\nconst Canvas: React.FC<CanvasProps> = ({\n  elementPositions,\n  moveElement,\n  selectElement\n}) => {\n  const [draggedElement, drag] = useState({\n    id: -1,\n    clientX: -1,\n    clientY: -1\n  } as DraggedElementPosition)\n\n  const drop = ({ id, clientX, clientY }: DraggedElement) => {\n    const payload = {\n      id,\n      left: clientX - draggedElement.clientX,\n      top: clientY - draggedElement.clientY\n    }\n    moveElement(payload)\n  }\n\n  return (\n    <div className=\"Canvas\">\n      {\n        elementPositions.map(({ top, left }, id) => {\n          return (\n            <div key={id}\n              style={{ top, left }}\n              className='canvas-element'\n              onDragStart={({ clientX, clientY }) => drag({ clientX, clientY  })}\n              onDragEnd={({ clientX, clientY }) => drop({ id, clientX, clientY  })}\n              onClick={() => selectElement({ id })}\n              draggable\n            >\n              <CanvasElement id={id} />\n            </div>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  elementPositions: selectElementPositions(state)\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  moveElement: (payload: MoveElementPayload) => dispatch(moveElement(payload)),\n  selectElement: (payload: SelectElementPayload) => dispatch(selectElement(payload))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Canvas)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport toPairs from 'lodash/toPairs'\nimport { selectSelectedElementProps } from '../Canvas/selectors'\nimport { RootState } from '../../store'\nimport { ElementProps } from '../elements'\n\ninterface ElementSettingsProps {\n  [key: string]: any\n  selectedElementProps: ElementProps\n}\n\nconst ElementSettings = ({ selectedElementProps }: ElementSettingsProps) => {\n  return (\n    <>\n      {toPairs(selectedElementProps).map(([key, value]) => {\n        return <div key={key}>{key}: {value}</div>\n      })}\n    </>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  selectedElementProps: selectSelectedElementProps(state)\n})\n\nexport default connect(mapStateToProps)(ElementSettings)\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport './style.sass'\nimport { isSelectedElement } from '../Canvas/selectors'\nimport { RootState } from '../../store'\nimport CanvasElementSettings from '../CanvasElementSettings'\n\ninterface ElementSettingsProps {\n  [key: string]: any\n  isSelectedElement: boolean\n}\n\nconst ElementSettings = ({ isSelectedElement }: ElementSettingsProps) => {\n  console.log(isSelectedElement)\n  return (\n    <div className=\"ElementSettings\">\n      <p>Settings</p>\n      {\n        isSelectedElement && <CanvasElementSettings />\n      }\n    </div>\n  )\n}\n\nconst mapStateToProps = (state: RootState) => ({\n  isSelectedElement: isSelectedElement(state),\n})\n\nexport default connect(mapStateToProps)(ElementSettings)\n","import React from 'react'\nimport './style.sass'\nimport Sidebar from '../Sidebar'\nimport Canvas from '../Canvas'\nimport Settings from '../Settings'\n\nexport default () => (\n  <div className=\"Body\">\n    <div className=\"sidebar\">\n      <Sidebar />\n    </div>\n    <div className=\"divisor\"></div>\n    <div className=\"canvas\">\n      <Canvas />\n    </div>\n    <div className=\"divisor\"></div>\n    <div className=\"settings\">\n      <Settings />\n    </div>\n  </div>\n)\n","import React from 'react'\n\nexport default () => (<label>Footer</label>)\n","import React from 'react';\nimport './style.sass';\nimport Header from './components/Header'\nimport Body from './components/Body'\nimport Footer from './components/Footer'\n\nfunction App() {\n  return (\n    <>\n      <div className=\"App\">\n        <div className=\"header\">\n          <Header />\n        </div>\n        <div className=\"body\">\n          <Body />\n        </div>\n        <div className=\"footer\">\n          <Footer />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport { createStore } from './store'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore()\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { configureStore } from '@reduxjs/toolkit'\nimport reducer from './reducer'\n\nexport type RootState = ReturnType<typeof reducer>\n\nexport const createStore = () => {\n  return configureStore({ reducer })\n}\n"],"sourceRoot":""}